syntax = "proto3";

package prod_service.products.v1;

import "filter/v1/filter.proto";
import "filter/v1/sort.proto";
import "google/api/annotations.proto";
import "prod_service/products/v1/product.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/HollyEllmo/my_proto_repo/gen/go/prod_service/products/v1;pb_prod_products";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Product Service API"
    version: "1.0"
    description: "API for managing products"
    contact: {
      name: "Product Service"
      email: "support@example.com"
    }
  }
  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
};

service ProductService {
  rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse) {
    option (google.api.http) = {
      post: "/v1/products"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new product"
      description: "Creates a new product with the provided details"
      tags: "Products"
    };
  }

  rpc AllProducts(AllProductsRequest) returns (AllProductsResponse) {
    option (google.api.http) = {get: "/v1/products"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get all products"
      description: "Retrieves a list of all products with optional filtering"
      tags: "Products"
    };
  }

  rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse) {}

  rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse) {}

  rpc ProductByID(ProductByIDRequest) returns (ProductByIDResponse) {}
}

message CreateProductRequest {
  // Name
  string name = 1;
  // Description
  string description = 2;
  // Image ID
  optional string image_id = 3;
  // Price
  uint64 price = 4;
  // Prince Currency
  uint32 currency_id = 5;
  // Rating
  uint32 rating = 6;
  // Category ID
  uint32 category_id = 7;
  // Specification
  string specification = 8;
}

message CreateProductResponse {
  Product product = 1;
}

message AllProductsRequest {
  filter.v1.Pagination pagination = 1;
  filter.v1.StringFieldFilter name = 2;
  filter.v1.StringFieldFilter description = 3;
  filter.v1.IntFieldFilter price = 4;
  filter.v1.IntFieldFilter rating = 5;
  filter.v1.IntFieldFilter category_id = 6;
  filter.v1.Sort sort = 7;
}

message AllProductsResponse {
  repeated Product product = 1;
}

message UpdateProductRequest {
  // ID
  string id = 1;
  // Name
  optional string name = 2;
  // Description
  optional string description = 3;
  // Image ID
  optional string image_id = 4;
  // Price
  optional uint64 price = 5;
  // Prince Currency
  optional uint32 currency_id = 6;
  // Rating
  optional uint32 rating = 7;
  // Category ID
  optional uint32 category_id = 8;
  // Specification
  optional string specification = 9;
}

message UpdateProductResponse {}

message DeleteProductRequest {
  // ID
  string id = 1;
}

message DeleteProductResponse {}

message ProductByIDRequest {
  // ID
  string id = 1;
}

message ProductByIDResponse {
  Product product = 1;
}
